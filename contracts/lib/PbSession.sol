// Code generated by protoc-gen-sol. DO NOT EDIT.
// source: contracts/lib/proto/session.proto
pragma solidity ^0.5.0;
import "./Pb.sol";

library PbSession {
    using Pb for Pb.Buffer;  // so we can call Pb funcs on Buffer obj

    struct SessionQuery {
        bytes32 session;   // tag: 1
        bytes query;   // tag: 2
    } // end struct SessionQuery

    function decSessionQuery(bytes memory raw) internal pure returns (SessionQuery memory m) {
        Pb.Buffer memory buf = Pb.fromBytes(raw);

        uint tag;
        Pb.WireType wire;
        while (buf.hasMore()) {
            (tag, wire) = buf.decKey();
            if (false) {} // solidity has no switch/case
            else if (tag == 1) {
                m.session = Pb._bytes32(buf.decBytes());
            }
            else if (tag == 2) {
                m.query = bytes(buf.decBytes());
            }
            else { buf.skipValue(wire); } // skip value of unknown tag
        }
    } // end decoder SessionQuery

}
