// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package singlegomoku

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = abi.U256
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// SingleGomokuABI is the input ABI used to generate the binding from.
const SingleGomokuABI = "[{\"constant\":false,\"inputs\":[{\"name\":\"_stateProof\",\"type\":\"bytes\"}],\"name\":\"intendSettle\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_action\",\"type\":\"bytes\"}],\"name\":\"applyAction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSeqNum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSettleFinalizedTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getActionDeadline\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_query\",\"type\":\"bytes\"}],\"name\":\"isFinalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalizeOnActionTimeout\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_players\",\"type\":\"address[]\"},{\"name\":\"_nonce\",\"type\":\"uint256\"},{\"name\":\"_timeout\",\"type\":\"uint256\"},{\"name\":\"_minStoneOffchain\",\"type\":\"uint8\"},{\"name\":\"_maxStoneOnchain\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"seq\",\"type\":\"uint256\"}],\"name\":\"IntendSettle\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[{\"name\":\"_query\",\"type\":\"bytes\"}],\"name\":\"getResult\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_key\",\"type\":\"uint256\"}],\"name\":\"getState\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]"

// SingleGomokuBin is the compiled bytecode used for deploying new contracts.
const SingleGomokuBin = ``

// DeploySingleGomoku deploys a new Ethereum contract, binding an instance of SingleGomoku to it.
func DeploySingleGomoku(auth *bind.TransactOpts, backend bind.ContractBackend, _players []common.Address, _nonce *big.Int, _timeout *big.Int, _minStoneOffchain uint8, _maxStoneOnchain uint8) (common.Address, *types.Transaction, *SingleGomoku, error) {
	parsed, err := abi.JSON(strings.NewReader(SingleGomokuABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(SingleGomokuBin), backend, _players, _nonce, _timeout, _minStoneOffchain, _maxStoneOnchain)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &SingleGomoku{SingleGomokuCaller: SingleGomokuCaller{contract: contract}, SingleGomokuTransactor: SingleGomokuTransactor{contract: contract}, SingleGomokuFilterer: SingleGomokuFilterer{contract: contract}}, nil
}

// SingleGomoku is an auto generated Go binding around an Ethereum contract.
type SingleGomoku struct {
	SingleGomokuCaller     // Read-only binding to the contract
	SingleGomokuTransactor // Write-only binding to the contract
	SingleGomokuFilterer   // Log filterer for contract events
}

// SingleGomokuCaller is an auto generated read-only Go binding around an Ethereum contract.
type SingleGomokuCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SingleGomokuTransactor is an auto generated write-only Go binding around an Ethereum contract.
type SingleGomokuTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SingleGomokuFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type SingleGomokuFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SingleGomokuSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type SingleGomokuSession struct {
	Contract     *SingleGomoku     // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// SingleGomokuCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type SingleGomokuCallerSession struct {
	Contract *SingleGomokuCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts       // Call options to use throughout this session
}

// SingleGomokuTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type SingleGomokuTransactorSession struct {
	Contract     *SingleGomokuTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// SingleGomokuRaw is an auto generated low-level Go binding around an Ethereum contract.
type SingleGomokuRaw struct {
	Contract *SingleGomoku // Generic contract binding to access the raw methods on
}

// SingleGomokuCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type SingleGomokuCallerRaw struct {
	Contract *SingleGomokuCaller // Generic read-only contract binding to access the raw methods on
}

// SingleGomokuTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type SingleGomokuTransactorRaw struct {
	Contract *SingleGomokuTransactor // Generic write-only contract binding to access the raw methods on
}

// NewSingleGomoku creates a new instance of SingleGomoku, bound to a specific deployed contract.
func NewSingleGomoku(address common.Address, backend bind.ContractBackend) (*SingleGomoku, error) {
	contract, err := bindSingleGomoku(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &SingleGomoku{SingleGomokuCaller: SingleGomokuCaller{contract: contract}, SingleGomokuTransactor: SingleGomokuTransactor{contract: contract}, SingleGomokuFilterer: SingleGomokuFilterer{contract: contract}}, nil
}

// NewSingleGomokuCaller creates a new read-only instance of SingleGomoku, bound to a specific deployed contract.
func NewSingleGomokuCaller(address common.Address, caller bind.ContractCaller) (*SingleGomokuCaller, error) {
	contract, err := bindSingleGomoku(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &SingleGomokuCaller{contract: contract}, nil
}

// NewSingleGomokuTransactor creates a new write-only instance of SingleGomoku, bound to a specific deployed contract.
func NewSingleGomokuTransactor(address common.Address, transactor bind.ContractTransactor) (*SingleGomokuTransactor, error) {
	contract, err := bindSingleGomoku(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &SingleGomokuTransactor{contract: contract}, nil
}

// NewSingleGomokuFilterer creates a new log filterer instance of SingleGomoku, bound to a specific deployed contract.
func NewSingleGomokuFilterer(address common.Address, filterer bind.ContractFilterer) (*SingleGomokuFilterer, error) {
	contract, err := bindSingleGomoku(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &SingleGomokuFilterer{contract: contract}, nil
}

// bindSingleGomoku binds a generic wrapper to an already deployed contract.
func bindSingleGomoku(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(SingleGomokuABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SingleGomoku *SingleGomokuRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _SingleGomoku.Contract.SingleGomokuCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SingleGomoku *SingleGomokuRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SingleGomoku.Contract.SingleGomokuTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SingleGomoku *SingleGomokuRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SingleGomoku.Contract.SingleGomokuTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SingleGomoku *SingleGomokuCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _SingleGomoku.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SingleGomoku *SingleGomokuTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SingleGomoku.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SingleGomoku *SingleGomokuTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SingleGomoku.Contract.contract.Transact(opts, method, params...)
}

// GetActionDeadline is a free data retrieval call binding the contract method 0xbbc35280.
//
// Solidity: function getActionDeadline() constant returns(uint256)
func (_SingleGomoku *SingleGomokuCaller) GetActionDeadline(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _SingleGomoku.contract.Call(opts, out, "getActionDeadline")
	return *ret0, err
}

// GetActionDeadline is a free data retrieval call binding the contract method 0xbbc35280.
//
// Solidity: function getActionDeadline() constant returns(uint256)
func (_SingleGomoku *SingleGomokuSession) GetActionDeadline() (*big.Int, error) {
	return _SingleGomoku.Contract.GetActionDeadline(&_SingleGomoku.CallOpts)
}

// GetActionDeadline is a free data retrieval call binding the contract method 0xbbc35280.
//
// Solidity: function getActionDeadline() constant returns(uint256)
func (_SingleGomoku *SingleGomokuCallerSession) GetActionDeadline() (*big.Int, error) {
	return _SingleGomoku.Contract.GetActionDeadline(&_SingleGomoku.CallOpts)
}

// GetResult is a free data retrieval call binding the contract method 0xef4592fb.
//
// Solidity: function getResult(bytes _query) constant returns(bool)
func (_SingleGomoku *SingleGomokuCaller) GetResult(opts *bind.CallOpts, _query []byte) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _SingleGomoku.contract.Call(opts, out, "getResult", _query)
	return *ret0, err
}

// GetResult is a free data retrieval call binding the contract method 0xef4592fb.
//
// Solidity: function getResult(bytes _query) constant returns(bool)
func (_SingleGomoku *SingleGomokuSession) GetResult(_query []byte) (bool, error) {
	return _SingleGomoku.Contract.GetResult(&_SingleGomoku.CallOpts, _query)
}

// GetResult is a free data retrieval call binding the contract method 0xef4592fb.
//
// Solidity: function getResult(bytes _query) constant returns(bool)
func (_SingleGomoku *SingleGomokuCallerSession) GetResult(_query []byte) (bool, error) {
	return _SingleGomoku.Contract.GetResult(&_SingleGomoku.CallOpts, _query)
}

// GetSeqNum is a free data retrieval call binding the contract method 0x6d15c457.
//
// Solidity: function getSeqNum() constant returns(uint256)
func (_SingleGomoku *SingleGomokuCaller) GetSeqNum(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _SingleGomoku.contract.Call(opts, out, "getSeqNum")
	return *ret0, err
}

// GetSeqNum is a free data retrieval call binding the contract method 0x6d15c457.
//
// Solidity: function getSeqNum() constant returns(uint256)
func (_SingleGomoku *SingleGomokuSession) GetSeqNum() (*big.Int, error) {
	return _SingleGomoku.Contract.GetSeqNum(&_SingleGomoku.CallOpts)
}

// GetSeqNum is a free data retrieval call binding the contract method 0x6d15c457.
//
// Solidity: function getSeqNum() constant returns(uint256)
func (_SingleGomoku *SingleGomokuCallerSession) GetSeqNum() (*big.Int, error) {
	return _SingleGomoku.Contract.GetSeqNum(&_SingleGomoku.CallOpts)
}

// GetSettleFinalizedTime is a free data retrieval call binding the contract method 0xb71ca01f.
//
// Solidity: function getSettleFinalizedTime() constant returns(uint256)
func (_SingleGomoku *SingleGomokuCaller) GetSettleFinalizedTime(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _SingleGomoku.contract.Call(opts, out, "getSettleFinalizedTime")
	return *ret0, err
}

// GetSettleFinalizedTime is a free data retrieval call binding the contract method 0xb71ca01f.
//
// Solidity: function getSettleFinalizedTime() constant returns(uint256)
func (_SingleGomoku *SingleGomokuSession) GetSettleFinalizedTime() (*big.Int, error) {
	return _SingleGomoku.Contract.GetSettleFinalizedTime(&_SingleGomoku.CallOpts)
}

// GetSettleFinalizedTime is a free data retrieval call binding the contract method 0xb71ca01f.
//
// Solidity: function getSettleFinalizedTime() constant returns(uint256)
func (_SingleGomoku *SingleGomokuCallerSession) GetSettleFinalizedTime() (*big.Int, error) {
	return _SingleGomoku.Contract.GetSettleFinalizedTime(&_SingleGomoku.CallOpts)
}

// GetState is a free data retrieval call binding the contract method 0x44c9af28.
//
// Solidity: function getState(uint256 _key) constant returns(bytes)
func (_SingleGomoku *SingleGomokuCaller) GetState(opts *bind.CallOpts, _key *big.Int) ([]byte, error) {
	var (
		ret0 = new([]byte)
	)
	out := ret0
	err := _SingleGomoku.contract.Call(opts, out, "getState", _key)
	return *ret0, err
}

// GetState is a free data retrieval call binding the contract method 0x44c9af28.
//
// Solidity: function getState(uint256 _key) constant returns(bytes)
func (_SingleGomoku *SingleGomokuSession) GetState(_key *big.Int) ([]byte, error) {
	return _SingleGomoku.Contract.GetState(&_SingleGomoku.CallOpts, _key)
}

// GetState is a free data retrieval call binding the contract method 0x44c9af28.
//
// Solidity: function getState(uint256 _key) constant returns(bytes)
func (_SingleGomoku *SingleGomokuCallerSession) GetState(_key *big.Int) ([]byte, error) {
	return _SingleGomoku.Contract.GetState(&_SingleGomoku.CallOpts, _key)
}

// GetStatus is a free data retrieval call binding the contract method 0x4e69d560.
//
// Solidity: function getStatus() constant returns(uint8)
func (_SingleGomoku *SingleGomokuCaller) GetStatus(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _SingleGomoku.contract.Call(opts, out, "getStatus")
	return *ret0, err
}

// GetStatus is a free data retrieval call binding the contract method 0x4e69d560.
//
// Solidity: function getStatus() constant returns(uint8)
func (_SingleGomoku *SingleGomokuSession) GetStatus() (uint8, error) {
	return _SingleGomoku.Contract.GetStatus(&_SingleGomoku.CallOpts)
}

// GetStatus is a free data retrieval call binding the contract method 0x4e69d560.
//
// Solidity: function getStatus() constant returns(uint8)
func (_SingleGomoku *SingleGomokuCallerSession) GetStatus() (uint8, error) {
	return _SingleGomoku.Contract.GetStatus(&_SingleGomoku.CallOpts)
}

// IsFinalized is a free data retrieval call binding the contract method 0xbcdbda94.
//
// Solidity: function isFinalized(bytes _query) constant returns(bool)
func (_SingleGomoku *SingleGomokuCaller) IsFinalized(opts *bind.CallOpts, _query []byte) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _SingleGomoku.contract.Call(opts, out, "isFinalized", _query)
	return *ret0, err
}

// IsFinalized is a free data retrieval call binding the contract method 0xbcdbda94.
//
// Solidity: function isFinalized(bytes _query) constant returns(bool)
func (_SingleGomoku *SingleGomokuSession) IsFinalized(_query []byte) (bool, error) {
	return _SingleGomoku.Contract.IsFinalized(&_SingleGomoku.CallOpts, _query)
}

// IsFinalized is a free data retrieval call binding the contract method 0xbcdbda94.
//
// Solidity: function isFinalized(bytes _query) constant returns(bool)
func (_SingleGomoku *SingleGomokuCallerSession) IsFinalized(_query []byte) (bool, error) {
	return _SingleGomoku.Contract.IsFinalized(&_SingleGomoku.CallOpts, _query)
}

// ApplyAction is a paid mutator transaction binding the contract method 0x1f2b71e5.
//
// Solidity: function applyAction(bytes _action) returns()
func (_SingleGomoku *SingleGomokuTransactor) ApplyAction(opts *bind.TransactOpts, _action []byte) (*types.Transaction, error) {
	return _SingleGomoku.contract.Transact(opts, "applyAction", _action)
}

// ApplyAction is a paid mutator transaction binding the contract method 0x1f2b71e5.
//
// Solidity: function applyAction(bytes _action) returns()
func (_SingleGomoku *SingleGomokuSession) ApplyAction(_action []byte) (*types.Transaction, error) {
	return _SingleGomoku.Contract.ApplyAction(&_SingleGomoku.TransactOpts, _action)
}

// ApplyAction is a paid mutator transaction binding the contract method 0x1f2b71e5.
//
// Solidity: function applyAction(bytes _action) returns()
func (_SingleGomoku *SingleGomokuTransactorSession) ApplyAction(_action []byte) (*types.Transaction, error) {
	return _SingleGomoku.Contract.ApplyAction(&_SingleGomoku.TransactOpts, _action)
}

// FinalizeOnActionTimeout is a paid mutator transaction binding the contract method 0xfa5e7ff5.
//
// Solidity: function finalizeOnActionTimeout() returns()
func (_SingleGomoku *SingleGomokuTransactor) FinalizeOnActionTimeout(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SingleGomoku.contract.Transact(opts, "finalizeOnActionTimeout")
}

// FinalizeOnActionTimeout is a paid mutator transaction binding the contract method 0xfa5e7ff5.
//
// Solidity: function finalizeOnActionTimeout() returns()
func (_SingleGomoku *SingleGomokuSession) FinalizeOnActionTimeout() (*types.Transaction, error) {
	return _SingleGomoku.Contract.FinalizeOnActionTimeout(&_SingleGomoku.TransactOpts)
}

// FinalizeOnActionTimeout is a paid mutator transaction binding the contract method 0xfa5e7ff5.
//
// Solidity: function finalizeOnActionTimeout() returns()
func (_SingleGomoku *SingleGomokuTransactorSession) FinalizeOnActionTimeout() (*types.Transaction, error) {
	return _SingleGomoku.Contract.FinalizeOnActionTimeout(&_SingleGomoku.TransactOpts)
}

// IntendSettle is a paid mutator transaction binding the contract method 0x130d33fe.
//
// Solidity: function intendSettle(bytes _stateProof) returns()
func (_SingleGomoku *SingleGomokuTransactor) IntendSettle(opts *bind.TransactOpts, _stateProof []byte) (*types.Transaction, error) {
	return _SingleGomoku.contract.Transact(opts, "intendSettle", _stateProof)
}

// IntendSettle is a paid mutator transaction binding the contract method 0x130d33fe.
//
// Solidity: function intendSettle(bytes _stateProof) returns()
func (_SingleGomoku *SingleGomokuSession) IntendSettle(_stateProof []byte) (*types.Transaction, error) {
	return _SingleGomoku.Contract.IntendSettle(&_SingleGomoku.TransactOpts, _stateProof)
}

// IntendSettle is a paid mutator transaction binding the contract method 0x130d33fe.
//
// Solidity: function intendSettle(bytes _stateProof) returns()
func (_SingleGomoku *SingleGomokuTransactorSession) IntendSettle(_stateProof []byte) (*types.Transaction, error) {
	return _SingleGomoku.Contract.IntendSettle(&_SingleGomoku.TransactOpts, _stateProof)
}

// SingleGomokuIntendSettleIterator is returned from FilterIntendSettle and is used to iterate over the raw logs and unpacked data for IntendSettle events raised by the SingleGomoku contract.
type SingleGomokuIntendSettleIterator struct {
	Event *SingleGomokuIntendSettle // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SingleGomokuIntendSettleIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SingleGomokuIntendSettle)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SingleGomokuIntendSettle)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SingleGomokuIntendSettleIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SingleGomokuIntendSettleIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SingleGomokuIntendSettle represents a IntendSettle event raised by the SingleGomoku contract.
type SingleGomokuIntendSettle struct {
	Seq *big.Int
	Raw types.Log // Blockchain specific contextual infos
}

// FilterIntendSettle is a free log retrieval operation binding the contract event 0xce68db27527c6058059e8cbd1c6de0528ef1c417fe1c21c545919c7da3466d2a.
//
// Solidity: event IntendSettle(uint256 seq)
func (_SingleGomoku *SingleGomokuFilterer) FilterIntendSettle(opts *bind.FilterOpts) (*SingleGomokuIntendSettleIterator, error) {

	logs, sub, err := _SingleGomoku.contract.FilterLogs(opts, "IntendSettle")
	if err != nil {
		return nil, err
	}
	return &SingleGomokuIntendSettleIterator{contract: _SingleGomoku.contract, event: "IntendSettle", logs: logs, sub: sub}, nil
}

// WatchIntendSettle is a free log subscription operation binding the contract event 0xce68db27527c6058059e8cbd1c6de0528ef1c417fe1c21c545919c7da3466d2a.
//
// Solidity: event IntendSettle(uint256 seq)
func (_SingleGomoku *SingleGomokuFilterer) WatchIntendSettle(opts *bind.WatchOpts, sink chan<- *SingleGomokuIntendSettle) (event.Subscription, error) {

	logs, sub, err := _SingleGomoku.contract.WatchLogs(opts, "IntendSettle")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SingleGomokuIntendSettle)
				if err := _SingleGomoku.contract.UnpackLog(event, "IntendSettle", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}
